// Suggested Firestore rules snippets. Integrate these into your project's firestore.rules with care.

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users: allow users to read their own data and update non-protected fields
    match /users/{userId} {
      allow read: if request.auth != null;

      // Prevent clients from changing hopePoints, hopePointsBreakdown, or lastRitualTimestamp
      allow update: if request.auth != null
        && request.auth.uid == userId
        && !(request.resource.data.keys().hasAny(['hopePoints', 'hopePointsBreakdown', 'lastRitualTimestamp']));

      // Creation only via admin or sign-up flows
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Ledger: only server-side writes allowed (callable functions) to ensure auditability
    match /hope_ledger/{entryId} {
      allow read: if request.auth != null;
      allow write: if false; // only Admin SDK / Cloud Functions should create ledger entries
    }

    // Leaderboard aggregates: read allowed, write disallowed for client
    match /leaderboard_aggregates/{doc} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // Analytics: prefer server writes; if you allow client writes, validate schema
    match /analytics/{doc} {
      allow read: if request.auth != null && request.auth.token.role == 'Admin';
      allow write: if false; // prefer server writes for reliability and anti-spoofing
    }

    // Other collections: keep your existing rules here

    // Fallback: deny by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
