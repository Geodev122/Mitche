rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
    
    // Helper function to check if user is verified organization
    function isVerifiedOrg() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['NGO', 'PublicWorker'] &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerified == true;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is participant in conversation
    function isParticipant(participants) {
      return isAuthenticated() && request.auth.uid in participants;
    }

    // === CORE COLLECTIONS ===
    
    // Users Collection
    match /users/{userId} {
      // Users can read and write their own documents
      allow read, write: if isOwner(userId);
      
      // Allow reading public profile data for other users
      allow read: if isAuthenticated() && 
        (resource.data.privacySettings.showProfile == true || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'NGO', 'PublicWorker']);
      
      // Admins can read all user documents for moderation
      allow read: if isAdmin();
      
      // Admins can update verification status
      allow update: if isAdmin() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isVerified', 'verificationStatus', 'reportCount', 'isSuspended', 'suspensionReason', 'suspensionExpiry']);
    }
    
    // Requests Collection  
    match /requests/{requestId} {
      // Anyone can read requests (for discovery)
      allow read: if true;
      
      // Authenticated users can create requests
      allow create: if isAuthenticated() && 
        request.resource.data.createdBy == request.auth.uid;
      
      // Users can update their own requests
      allow update: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || 
         resource.data.assignedHelper == request.auth.uid ||
         isAdmin());
      
      // Users can delete their own requests, admins can delete any
      allow delete: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || isAdmin());
    }
    
    // Offerings Collection
    match /offerings/{offeringId} {
      // Anyone can read offerings
      allow read: if true;
      
      // Authenticated users can create offerings
      allow create: if isAuthenticated() && 
        request.resource.data.offeredBy == request.auth.uid;
      
      // Users can update their own offerings or request owner can update status
      allow update: if isAuthenticated() && 
        (resource.data.offeredBy == request.auth.uid || 
         isOwnerOfRequest(resource.data.requestId) ||
         isAdmin());
      
      // Users can delete their own offerings
      allow delete: if isAuthenticated() && 
        (resource.data.offeredBy == request.auth.uid || isAdmin());
    }
    
    function isOwnerOfRequest(requestId) {
      return get(/databases/$(database)/documents/requests/$(requestId)).data.createdBy == request.auth.uid;
    }
    
    // Community Events Collection
    match /communityEvents/{eventId} {
      // Anyone can read published events
      allow read: if true;
      
      // Verified organizations and admins can create events
      allow create: if isAuthenticated() && 
        (isVerifiedOrg() || isAdmin()) &&
        request.resource.data.organizerId == request.auth.uid;
      
      // Event organizers and admins can update events
      allow update: if isAuthenticated() && 
        (resource.data.organizerId == request.auth.uid || 
         request.auth.uid in resource.data.get('coOrganizers', []) ||
         isAdmin());
      
      // Event organizers and admins can delete events
      allow delete: if isAuthenticated() && 
        (resource.data.organizerId == request.auth.uid || isAdmin());
    }
    
    // Resources Collection
    match /resources/{resourceId} {
      // Anyone can read verified resources
      allow read: if true;
      
      // Verified organizations and admins can create resources
      allow create: if isAuthenticated() && 
        (isVerifiedOrg() || isAdmin()) &&
        request.resource.data.createdBy == request.auth.uid;
      
      // Resource creators and admins can update resources
      allow update: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || isAdmin());
      
      // Resource creators and admins can delete resources
      allow delete: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || isAdmin());
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && 
        resource.data.recipientId == request.auth.uid;
      
      // System can create notifications for users
      allow create: if isAuthenticated();
      
      // Users can update their own notifications (mark as read)
      allow update: if isAuthenticated() && 
        resource.data.recipientId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'readAt']);
      
      // Users can delete their own notifications
      allow delete: if isAuthenticated() && 
        resource.data.recipientId == request.auth.uid;
    }

    // === ENHANCED COLLECTIONS ===
    
    // Conversations Collection
    match /conversations/{conversationId} {
      // Participants can read their conversations
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Authenticated users can create conversations
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      
      // Participants can update conversation metadata
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Admins can read/update for moderation
      allow read, update: if isAdmin();
      
      // Messages subcollection
      match /messages/{messageId} {
        // Conversation participants can read messages
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Authenticated users can create messages in their conversations
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
          request.resource.data.senderId == request.auth.uid;
        
        // Message senders can update their own messages
        allow update: if isAuthenticated() && 
          resource.data.senderId == request.auth.uid;
        
        // Admins can read/update for moderation
        allow read, update: if isAdmin();
      }
    }
    
    // Tapestry Threads Collection
    match /tapestryThreads/{threadId} {
      // Anyone can read approved threads
      allow read: if resource.data.approvalStatus == 'Approved';
      
      // Authenticated users can create threads (nominations)
      allow create: if isAuthenticated() && 
        request.resource.data.nominatedBy == request.auth.uid;
      
      // Thread nominees can update their revelation status
      allow update: if isAuthenticated() && 
        resource.data.honoreeId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isAnonymous', 'honoreeRealName', 'honoreePhotoUrl']);
      
      // Admins can approve/reject threads
      allow update: if isAdmin();
      
      // Admins can read all threads (for moderation)
      allow read: if isAdmin();
    }
    
    // Reports Collection
    match /reports/{reportId} {
      // Users can read their own reports
      allow read: if isAuthenticated() && 
        resource.data.reportedBy == request.auth.uid;
      
      // Authenticated users can create reports
      allow create: if isAuthenticated() && 
        request.resource.data.reportedBy == request.auth.uid;
      
      // Admins can read and update all reports
      allow read, update: if isAdmin();
    }
    
    // Analytics Collection
    match /analytics/{analyticsId} {
      // Only admins can read analytics
      allow read: if isAdmin();
      
      // System can write analytics (server-side only)
      allow write: if false; // Analytics should be written server-side only
    }
    
    // System Settings Collection
    match /systemSettings/{settingId} {
      // Public settings can be read by anyone
      allow read: if resource.data.isPublic == true;
      
      // Authenticated users can read non-public settings
      allow read: if isAuthenticated();
      
      // Only admins can write settings
      allow write: if isAdmin();
    }
    
    // Achievements Collection
    match /achievements/{achievementId} {
      // Anyone can read active achievements
      allow read: if resource.data.isActive == true && resource.data.isHidden == false;
      
      // Authenticated users can read all achievements (for progress tracking)
      allow read: if isAuthenticated();
      
      // Only admins can write achievements
      allow write: if isAdmin();
    }
    
    // User Achievements Collection
    match /userAchievements/{userAchievementId} {
      // Users can read their own achievements
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // System can create/update user achievements
      allow write: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Admins can read all user achievements
      allow read: if isAdmin();
    }

    // === SUBCOLLECTIONS ===
    
    // User's private data subcollection
    match /users/{userId}/private/{document} {
      // Only the user and admins can access private data
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // User's activity logs subcollection
    match /users/{userId}/activities/{activityId} {
      // Users can read their own activity logs
      allow read: if isOwner(userId);
      
      // System can write activity logs
      allow create: if isAuthenticated();
      
      // Admins can read all activity logs
      allow read: if isAdmin();
    }

    // === SECURITY FUNCTIONS ===
    
    // Rate limiting function (basic implementation)
    function rateLimit(collection, timeWindow) {
      // This would need to be implemented with cloud functions
      // for proper rate limiting across requests
      return true;
    }
    
    // Content validation function
    function isValidContent(content) {
      // Basic content validation
      return content.size() > 0 && content.size() < 10000;
    }
    
    // === FALLBACK RULES ===
    
    // Admin override for any document
    match /{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}