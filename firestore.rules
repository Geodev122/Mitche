rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users
    match /users/{userId} {
      allow read: if request.auth != null;
      // Allow users to update their own profile but prevent client-side changes to aggregates
      allow update: if request.auth != null
        && request.auth.uid == userId
        && !(request.resource.data.keys().hasAny(['hopePoints', 'hopePointsBreakdown', 'lastRitualTimestamp', 'badges']));
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Public read access for community events, resources, and offerings
    match /communityEvents/{eventId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Organization'];
    }

    match /resources/{resourceId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Organization'];
    }

    match /offerings/{offeringId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Organization'];
    }

    // Requests
    match /requests/{requestId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (resource.data.createdBy == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Organization']);
    }

    // Notifications (recipient only)
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.resource.data.recipientId == request.auth.uid;
    }

    // Tapestry threads
    match /tapestryThreads/{threadId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Ledger: only server-side writes allowed
    match /hope_ledger/{entryId} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // Leaderboard aggregates: read allowed, write disallowed for clients
    match /leaderboard_aggregates/{doc} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // Analytics: server-only writes; admin read
    match /analytics/{doc} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      allow write: if false;
    }

    // Achievements & userAchievements: read for users; creation only by server or admins
    match /achievements/{id} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    match /userAchievements/{id} {
      allow read: if request.auth != null;
      allow write: if false; // only server-side or admin-managed
    }

    // Nominations for awards (admin-managed)
    match /nominations/{id} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Fallback: deny by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}