// Firestore Security Rules for Mitché Platform
// Copy these rules to Firebase Console → Firestore → Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow reading public profile info for all authenticated users
      allow read: if request.auth != null && 
        resource.data.keys().hasAll(['symbolicName', 'symbolicIcon', 'role', 'isVerified']);
    }

    // Requests - all authenticated users can read, only owner can write
    match /requests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.helperId);
    }

    // Offerings - all authenticated users can read, only authenticated can create
    match /offerings/{offeringId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Community Events - all can read, only verified NGO/PublicWorker/Admin can create
    match /communityEvents/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerified == true &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['NGO', 'PublicWorker', 'Admin'];
      allow update: if request.auth != null && request.auth.uid == resource.data.organizerId;
    }

    // Resources - all can read, only verified organizations can create
    match /resources/{resourceId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerified == true &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['NGO', 'PublicWorker', 'Admin'];
      allow update: if request.auth != null && request.auth.uid == resource.data.organizerId;
    }

    // Notifications - users can only read their own notifications
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Admin-only collections
    match /adminData/{document=**} {
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
  }
}